# -*- coding: utf-8 -*-
"""AnalisisNetflix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nerY-OzV6ZKBEHQ_FujWkFDNo2g6h1jW

Analisis de consumo de netflix con Python

# 1. Importacion y carga de datos.
"""

from google.colab import files
datos = files.upload()

import io
import pandas as pd

df = pd.read_csv(io.BytesIO(datos['NetflixViewingHistory.csv']))

df

"""# 2. Analisis Exploratorio"""

#Cantidad de filas y columnas
df.shape

#Descripcion de variables
df.info()

#Listar los 50 primeros
df.head(50)

"""Vemos que existe un patron en el que diferentes partes se separan por dos puntos. Vamos a contar en cuantas partes distintas se separan nuestros contenidos."""

separacion_lista = df.Title.str.split(pat = ':', expand=False).to_frame()
separacion_lista

separacion_lista['num_partes'] = separacion_lista.Title.apply(len)
separacion_lista

#Contar los valores de la lista
separacion_lista.num_partes.value_counts()

"""Vamos a analizar los titulos por numero de partes a ver si hay algun patron."""

separacion_lista.loc[separacion_lista.num_partes==1].head(10)

separacion_lista.loc[separacion_lista.num_partes==2].head(10)

separacion_lista.loc[separacion_lista.num_partes==3].head(10)

separacion_lista.loc[separacion_lista.num_partes==4].head(10)

separacion_lista.loc[separacion_lista.num_partes==5].head(10)

"""# 3. Creacion de Variables.

Nuestro dataset tiene pocas variables, por lo tanto vamos a crear unas nuevas.

### 3.1 Variables a partir del Titulo
"""

import numpy as np

separacion_lista['tipo'] = np.where(separacion_lista.num_partes < 3, 'pelicula', 'serie')
separacion_lista

df = pd.concat([df, separacion_lista['tipo']], axis = 1)
#del(df['tipo']) eliminar columna
df

"""Vamos a dividir los titulos en sus diferentes niveles y generar nuevas variables."""

separacion_cols = df.Title.str.split(pat = ':', expand = True)
separacion_cols

separacion_cols.columns = ['nivel1', 'nivel2', 'nivel3', 'nivel4', 'nivel5']
separacion_cols

df = pd.concat([df, separacion_cols], axis = 1)
df

"""### 3.2 Variables a partir de la Fecha

Podemos extraer los diferentes componentes de una fecha para crear nuevas variables.
"""

df['fecha'] = pd.to_datetime(df.Date)
df.drop(columns = 'Date', inplace = True)
df

df.info()

df.set_index('fecha', inplace = True)
df

def atributos_fechas(data):
  data['año'] = data.index.year
  data['mes'] = data.index.month_name()
  data['dia_mes'] = data.index.day
  data['dia_semana'] = data.index.day_name()
  return(data)

atributos_fechas(df)

"""# 4. Analisis

Tiempo desde que tiene Netflix.

```
# Tiene formato de código
```
"""

from datetime import date

hoy = pd.Timestamp(date.today())
primer_dia = df.index.min()
tiempo = hoy - primer_dia

print("Llevas usando Netflix {0} dias.".format(tiempo.days))

"""Dinero gastado hasta hoy"""

coste_mensual = 6

gasto = tiempo.days / 30 * coste_mensual

print("LLevas gastado {0} dolares en Netflix".format(gasto))

"""Cuanto tiempo le dedica por año

"""

media_min_serie = 45
media_min_pelicula = 100

consumo = df.loc[df.año < 2023].groupby('tipo').Title.count()

minutos_peliculas_año = consumo['pelicula'] * media_min_pelicula / 2
minutos_series_año = consumo['serie'] * media_min_serie / 2

dias_peliculas_año = minutos_peliculas_año / 60 / 24
dias_series_año = minutos_series_año / 60 / 24


print("Al año le dedicas {0} dias de tu vida a ver series y {1} dias de tu vida a ver peliculas".format(round(dias_peliculas_año), round(dias_series_año)))

"""Cuales son las 10 series de las que he visto mas capitulos"""

df.loc[df.tipo == 'serie'].nivel1.value_counts(ascending = True).tail(10).plot.barh(cmap = 'Pastel1');

df[df.Title.str.contains('Resident')]

"""Que dia de la semana ve mas series?"""

df.loc[df.tipo == 'serie', 'dia_semana'].value_counts().plot(kind = 'bar');

"""Existen diferencias en cuando ve Series o Peliculas?"""

import seaborn as sns

sns.countplot(data = df, x = 'dia_semana', hue = 'tipo', palette= 'pastel');

"""Cual es el consumo por mes?"""

df.loc[df.año < 2023].mes.value_counts().plot.bar();

df.año.value_counts().plot.bar();